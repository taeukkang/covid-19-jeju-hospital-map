{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","locations","setLocations","map","setMap","mapOptions","center","lat","lng","zoom","zoomControl","useEffect","naver","maps","Map","createMarker","location","iconColor","options","position","content","size","Size","anchor","Point","marker","Marker","infoWindowHTML","이름","주소","전화번호","infoWindow","InfoWindow","Event","addListener","e","open","prev","data","hospital","healthCenter","ansimHospital","listGroupItem","type","ListGroup","Item","onMouseOver","loc","onListItemHover","className","href","Navbar","bg","Brand","icon","faPlusSquare","Toggle","aria-controls","Collapse","id","Nav","Link","faChartArea","faGithub","Container","fluid","Row","Col","sm","md","style","overflowY","width","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2c627e9d.chunk.js","sourcesContent":["/* eslint-disable no-undef */\nimport React, { useState, useEffect } from \"react\";\nimport { Container, Row, Col, ListGroup, Navbar, Nav } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\nimport { faPlusSquare, faChartArea } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./App.css\";\nimport data from \"./hospital.json\";\n\nfunction App() {\n    const [locations, setLocations] = useState({});\n    const [map, setMap] = useState(null);\n\n    const mapOptions = {\n        center: {\n            lat: 33.377165,\n            lng: 126.533382\n        },\n        zoom: 10,\n        zoomControl: true //줌 컨트롤의 표시 여부\n    };\n\n    useEffect(() => {\n        setMap(new naver.maps.Map(\"map\", mapOptions));\n    }, []);\n\n    const createMarker = (location, iconColor) => {\n        let options = {\n            position: {\n                lat: location.lat,\n                lng: location.lng\n            },\n            map: map\n        };\n\n        if (iconColor === \"black\" || iconColor === \"green\") {\n            options[\"icon\"] = {\n                content:\n                    '<img src=\"' +\n                    `/images/pin_${iconColor}.png\" alt=\"\" ` +\n                    'style=\"margin: 0px; padding: 0px; border: 0px solid transparent; display: block; max-width: none; max-height: none; ' +\n                    '-webkit-user-select: none; position: absolute; width: 22px; height: 35px; left: 0px; top: 0px;\">',\n                size: new naver.maps.Size(22, 35),\n                anchor: new naver.maps.Point(11, 35)\n            };\n        }\n\n        let marker = new naver.maps.Marker(options);\n\n        const infoWindowHTML = `<div style=\"font-size: small; padding: 15px;\"><h5>${location.이름}</h5><p>${location.주소}<br /><a href=\"tel:${location.전화번호}\">${location.전화번호}</a></p></div>`;\n\n        const infoWindow = new naver.maps.InfoWindow({\n            content: infoWindowHTML\n        });\n\n        // mouseover event unsupported in touch devices (mobile)\n        naver.maps.Event.addListener(marker, \"mouseover\", function(e) {\n            infoWindow.open(map, marker);\n        });\n\n        naver.maps.Event.addListener(marker, \"click\", function(e) {\n            infoWindow.open(map, marker);\n        });\n\n        setLocations(prev => {\n            return {\n                ...prev,\n                [location.이름]: {\n                    marker: marker,\n                    infoWindow: infoWindow\n                }\n            };\n        });\n    };\n\n    useEffect(() => {\n        if (map) {\n            data.hospital.map(location => {\n                createMarker(location, \"default\");\n            });\n            data.healthCenter.map(location => {\n                createMarker(location, \"black\");\n            });\n            data.ansimHospital.map(location => {\n                createMarker(location, \"green\");\n            });\n        }\n    }, [map]);\n\n    const onListItemHover = location => {\n        let loc = locations[location.이름];\n        loc.infoWindow.open(map, loc.marker);\n    };\n\n    const listGroupItem = (location, type) => {\n        return (\n            <ListGroup.Item onMouseOver={() => onListItemHover(location)}>\n                <h1 className=\"h5 font-weight-bold\">\n                    {location.이름}\n                    <small> ({type})</small>\n                </h1>\n                <p className=\"mb-1\">{location.주소}</p>\n                <p className=\"mb-1\">\n                    <a href={`tel:${location.전화번호}`}>{location.전화번호}</a>\n                </p>\n            </ListGroup.Item>\n        );\n    };\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Navbar bg=\"light\" className=\"mb-3 navbar-mobile-thin\">\n                    <Navbar.Brand href=\"/\">\n                        <FontAwesomeIcon\n                            icon={faPlusSquare}\n                            size=\"lg\"\n                            className=\"mr-2\"\n                        />\n                        코로나19 제주 지정의료기관\n                    </Navbar.Brand>\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                    <Navbar.Collapse id=\"basic-navbomar-nav\">\n                        <Nav className=\"ml-auto\">\n                            <Nav.Link href=\"https://livecorona.co.kr\">\n                                <FontAwesomeIcon icon={faChartArea} size=\"lg\" />\n                            </Nav.Link>\n                            <Nav.Link href=\"https://github.com/taeukme/covid-19-jeju-hospital-map/\">\n                                <FontAwesomeIcon icon={faGithub} size=\"lg\" />\n                            </Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n            </header>\n            <main>\n                <Container fluid>\n                    <Row>\n                        <Col sm={4} md={4}>\n                            <ListGroup\n                                className=\"list-group-item-auto-height\"\n                                style={{ overflowY: \"scroll\" }}>\n                                {data.hospital.map(location => {\n                                    return listGroupItem(\n                                        location,\n                                        \"선별진료소\"\n                                    );\n                                })}\n                                {data.healthCenter.map(location => {\n                                    return listGroupItem(location, \"보건소\");\n                                })}\n                                {data.ansimHospital.map(location => {\n                                    return listGroupItem(\n                                        location,\n                                        \"국민안심병원\"\n                                    );\n                                })}\n                            </ListGroup>\n                        </Col>\n                        <Col sm={8} md={8}>\n                            <div\n                                id=\"map\"\n                                className=\"map-auto-height\"\n                                style={{ width: \"100%\" }}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}